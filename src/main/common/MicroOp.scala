
package borb.common

import spinal.core._

object MicroCode extends SpinalEnum {
  val uopNOP = newElement()
  val uopLUI = newElement()
  val uopAUIPC = newElement()
  val uopJAL = newElement()
  val uopJALR = newElement()
  val uopBEQ = newElement()
  val uopBNE = newElement()
  val uopBLT = newElement()
  val uopBGE = newElement()
  val uopBLTU = newElement()
  val uopBGEU = newElement()
  val uopLB = newElement()
  val uopLH = newElement()
  val uopLW = newElement()
  val uopLBU = newElement()
  val uopLHU = newElement()
  val uopSB = newElement()
  val uopSH = newElement()
  val uopSW = newElement()
  val uopADDI = newElement()
  val uopSLTI = newElement()
  val uopSLTIU = newElement()
  val uopXORI = newElement()
  val uopORI = newElement()
  val uopANDI = newElement()
  val uopSLLI = newElement()
  val uopSRLI = newElement()
  val uopSRAI = newElement()
  val uopADD = newElement()
  val uopSUB = newElement()
  val uopSLL = newElement()
  val uopSLT = newElement()
  val uopSLTU = newElement()
  val uopXOR = newElement()
  val uopSRL = newElement()
  val uopSRA = newElement()
  val uopOR = newElement()
  val uopAND = newElement()
  val uopFENCE = newElement()
  val uopFENCE_I = newElement()
  val uopECALL = newElement()
  val uopEBREAK = newElement()
  val uopCSRRW = newElement()
  val uopCSRRS = newElement()
  val uopCSRRC = newElement()
  val uopCSRRWI = newElement()
  val uopCSRRSI = newElement()
  val uopCSRRCI = newElement()
  val uopLWU = newElement()
  val uopLD = newElement()
  val uopSD = newElement()
  val uopADDIW = newElement()
  val uopSLLIW = newElement()
  val uopSRLIW = newElement()
  val uopSRAIW = newElement()
  val uopADDW = newElement()
  val uopSUBW = newElement()
  val uopSLLW = newElement()
  val uopSRLW = newElement()
  val uopSRAW = newElement()
}
